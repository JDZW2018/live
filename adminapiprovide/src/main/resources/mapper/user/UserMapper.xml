<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2015-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.myproject.user.mapper.UserMapper">
    <!--<cache type="org.mybatis.caches.redis.RedisCache" />-->
    <resultMap type="User" id="resultMap">
        <id property="id" column="ID" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="SMALLINT"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="version" property="version" jdbcType="INTEGER"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="accid" property="accid" jdbcType="VARCHAR"/>
        <result column="accid_token" property="accidToken" jdbcType="VARCHAR"/>
        <result column="pay_password" property="payPassword" jdbcType="VARCHAR"/>

        <result column="money" property="money" jdbcType="DECIMAL"/>
        <result column="countries" property="countries" jdbcType="VARCHAR"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="area" property="area" jdbcType="VARCHAR"/>
        <result column="countries_id" property="countriesId" jdbcType="VARCHAR"/>
        <result column="province_id" property="provinceId" jdbcType="VARCHAR"/>
        <result column="city_id" property="cityId" jdbcType="VARCHAR"/>

        <result column="area_id" property="areaId" jdbcType="VARCHAR"/>
        <result column="score" property="score" jdbcType="DECIMAL"/>
        <result column="user_type" property="userType" jdbcType="INTEGER"/>

        <result column="label_id" property="labelId" jdbcType="VARCHAR"/>
        <result column="user_level" property="userLevel" jdbcType="INTEGER"/>
        <result column="user_identity" property="userIdentity" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="country_code" property="countryCode" jdbcType="VARCHAR"/>
        <result column="photo" property="photo" jdbcType="VARCHAR"/>
        <result column="signature" property="signature" jdbcType="VARCHAR"/>
        <result column="commendname" property="commendname" jdbcType="VARCHAR"/>
        <result column="expiration_date" property="expirationDate" jdbcType="BIGINT"/>
        <result column="qr_code_url" property="qrCodeUrl" jdbcType="VARCHAR"/>
        <result column="labelName" property="labelName" jdbcType="VARCHAR"/>
        <result column="openId" property="openId" jdbcType="VARCHAR"/>
        <result column="couponNum" property="couponNum" jdbcType="INTEGER"/>
        <result column="isClaim" property="isClaim" jdbcType="VARCHAR"/>
        <result column="wx_openId" property="wxOpenId" jdbcType="VARCHAR"></result>
        <result column="weibo_openId" property="weiboOpenId" jdbcType="VARCHAR"></result>
        <result column="qr_code_img_url" property="qrCodeImgUrl" jdbcType="VARCHAR"></result>
        <result column="the_public_openId" property="thePublicOpenId" jdbcType="VARCHAR"></result>
        <association property="userlevel" javaType="UserLevel" column="user_level">
            <id property="id" column="ID" jdbcType="INTEGER"></id>
            <result property="stuname" column="stuname" jdbcType="VARCHAR"></result>
        </association>
        <association property="stulabel" javaType="StudyLabel" column="label_id">
            <id property="id" column="ID" jdbcType="INTEGER"></id>
            <result property="labelname" column="labelname" jdbcType="VARCHAR"></result>
        </association>

    </resultMap>

    <select id="selectById" resultMap="resultMap" parameterType="java.lang.String">
         SELECT
              CONCAT(
                t1.countries,
                t1.province,
                t1.city
              ) AS address,
              t1.phone,
              t1.country_code,
              t1.email,
              t1.countries,
              t1.province,
              t1.city,
              t1.countries_id,
              t1.province_id,
              t1.city_id,
              t1.signature,
              t1.real_name,
              t1.qr_code_url,
              t1.user_id,
              t1.login_name,
              t1.user_name,
              t1.password,
              t1.pay_password,
              t1.nick_name,
              t1.real_name,
              t1.status,
              t1.create_time,
              t1.version,
              t1.accid,
              t1.accid_token,
              t1.expiration_date,
              t1.money,
              t1.user_identity,
              t1.label_id,
              t1.labelName,
              t1.photo,
              t1.expiration_date,
              t1.qr_code_img_url,
              IFNULL(
                (SELECT
                  capital.integral
                FROM
                  user_capital capital
                WHERE capital.user_id = t1.`user_id`),
                0
              ) AS score
            FROM
              user t1
            WHERE t1.user_id = #{userId}
    </select>
    <select id="selectByLoginName" resultMap="resultMap" parameterType="java.lang.String">
      select user_type,user_identity,photo,real_name,qr_code_url,user_id,login_name,user_name,password,
      nick_name,phone,status,create_time,version,accid,accid_token,openId,weibo_openId
      from user where login_name = #{loginName}
      <if test="counttriesCode != null and counttriesCode != ''">
          and country_code = #{counttriesCode}
      </if>
    </select>
    <select id="selectByPhone" resultMap="resultMap" parameterType="java.lang.String">
        select user_type,user_identity,photo,real_name,qr_code_url,user_id,login_name,user_name,password,
        nick_name,phone,status,create_time,version,accid,accid_token,openId,weibo_openId
        from user where phone = #{phone}
        <if test="counttriesCode != null and counttriesCode != ''">
            and country_code = #{counttriesCode}
        </if>
    </select>
    <insert id="insert" parameterType="User">
        insert into user
        (qr_code_url,user_id,login_name,user_name,nick_name,phone,email,password,real_name,accid,accid_token,status,version,create_time,commendname,countries_id,province_id,city_id,user_type,user_identity,country_code,countries,province,city,label_id,photo,user_level)
        VALUES (#{qrCodeUrl},#{userId},#{loginName},#{userName},#{nickName},#{phone},#{email},#{password},#{realName},#{accid},#{accidToken},#{status},#{version},#{createTime},#{commendname},#{countriesId},#{provinceId},#{cityId},#{userType},#{userIdentity},#{countryCode},#{countries},#{province},#{city},#{labelId},#{photo},#{userLevel})
    </insert>
    <update id="updateAccId">
        update user set accid=#{accid},accid_token=#{accidToken} where user_id = #{userId}
    </update>

    <select id="getPage" resultMap="resultMap">
        select id,user_id,user_name,real_name,login_name,phone,email,nick_name,id_num,create_time from user where status = 1 order by create_time desc
    </select>

    <update id="updatePwd" parameterType="User">
        update user set password=#{password} where id=#{id}
    </update>

    <update id="updatePay" parameterType="User">
        update user set pay_password=#{payPassword} where id=#{id}
    </update>
    <update id="updateQrCodeImg" parameterType="User">
        update user set qr_code_img_url=#{qrCodeImgUrl} where user_id=#{userId}
    </update>

    <select id="getPageForeach" resultMap="resultMap">
        SELECT
        concat(
        t1.countries,
        t1.province,
        t1.city
        ) address,
        t2.stuname,
        t1.id,
        t1.user_id,
        t1.user_name,
        t1.real_name,
        t1.login_name,
        t1.phone,
        t1.commendname,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        IFNULL(
        (
        SELECT
        c.tael
        FROM
        user_capital c
        WHERE
        c.user_id = t1.`user_id`
        ),
        0
        ) AS money,
        t1.countries,
        t1.province,
        t1.city,
        t1.area,
        IFNULL(
        (
        SELECT
        capital.integral
        FROM
        user_capital capital
        WHERE
        capital.user_id = t1.`user_id`
        ),
        0
        ) AS score,
        t1.user_type,
        t1. STATUS,
        t1.user_level,
        t1.user_identity,
        t1.label_id
        FROM
        user t1
        LEFT JOIN user_level t2 ON t1.user_level = t2.id
        LEFT JOIN study_label t3 ON t1.label_id = t3.id
        WHERE
        1 = 1
        <if test="map.keyword != null and map.keyword!=''">and
            (
            t1.user_name like CONCAT('%',#{map.keyword},'%')
            or t1.real_name like CONCAT('%',#{map.keyword},'%')
            or t1.login_name like CONCAT('%',#{map.keyword},'%')
            or t1.nick_name like CONCAT('%',#{map.keyword},'%')
            or t1.phone like CONCAT('%',#{map.keyword},'%')
            )
        </if>
        <if test="map.phone != null and map.phone!=''">and
            (
            t1.phone like CONCAT('%',#{map.phone},'%')
            )
        </if>
        <if test="map.type != null  and map.type != ''">and
            t1.user_type = #{map.type}
        </if>
        <if test="map.identity != null and map.identity != ''">and
            t1.user_identity = #{map.identity}
        </if>
        <if test="map.status != null">and
            t1.status = #{map.status}
        </if>
        order by t1.create_time desc
    </select>

    <select id="getCouponUserPageForeach" resultMap="resultMap">
        SELECT
        concat(
        t1.countries,
        t1.province,
        t1.city
        ) address,
        t2.stuname,
        t1.id,
        t1.user_id,
        <if test="map.couponId !=null and map.couponId !=''">
           (SELECT COUNT(*) FROM s_coupon_claim_user WHERE user_id = t1.user_id AND coupon_id=#{map.couponId}) AS couponNum,
           (SELECT is_claim FROM s_coupon_claim_user WHERE user_id = t1.user_id AND coupon_id=#{map.couponId}) AS isClaim,
        </if>
        t1.user_name,
        t1.real_name,
        t1.login_name,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        IFNULL(
        (
        SELECT
        c.tael
        FROM
        user_capital c
        WHERE
        c.user_id = t1.`user_id`
        ),
        0
        ) AS money,
        t1.countries,
        t1.province,
        t1.city,
        t1.area,
        IFNULL(
        (
        SELECT
        capital.integral
        FROM
        user_capital capital
        WHERE
        capital.user_id = t1.`user_id`
        ),
        0
        ) AS score,
        t1.user_type,
        t1. STATUS,
        t1.user_level,
        t1.user_identity,
        t1.label_id
        FROM
        user t1
        LEFT JOIN user_level t2 ON t1.user_level = t2.id
        LEFT JOIN study_label t3 ON t1.label_id = t3.id
        WHERE
        1 = 1
        <if test="map.keyword != null and map.keyword!=''">and
            (
            t1.user_name like CONCAT('%',#{map.keyword},'%')
            or t1.real_name like CONCAT('%',#{map.keyword},'%')
            or t1.login_name like CONCAT('%',#{map.keyword},'%')
            or t1.nick_name like CONCAT('%',#{map.keyword},'%')
            or t1.phone like CONCAT('%',#{map.keyword},'%')
            )
        </if>
        <if test="map.phone != null and map.phone!=''">and
            (
            t1.phone like CONCAT('%',#{map.phone},'%')
            )
        </if>
        <if test="map.type != null  and map.type != ''">and
            t1.user_type = #{map.type}
        </if>
        <if test="map.identity != null and map.identity != ''">and
            t1.user_identity = #{map.identity}
        </if>
        <if test="map.status != null">and
            t1.status = #{map.status}
        </if>
        order by t1.create_time desc
    </select>

    <update id="change" parameterType="Integer">
          update user set user_type = 1 where id=#{id}
    </update>

    <update id="userend" parameterType="Integer">
         update user set status = 0 where id=#{id}
    </update>

    <update id="userstart" parameterType="Integer">
        update user set status = 1 where id=#{id}
    </update>

    <select id="checktype" parameterType="Integer" resultType="Integer">
        select user_type from user where id=#{id}
    </select>

    <select id="getUserList" resultMap="resultMap">
        select id,user_id,user_name,real_name,login_name,phone,email,nick_name,id_num,create_time,qr_code_img_url from user where status = 1 order by create_time desc
    </select>
    <select id="getTweetyUserList" resultMap="resultMap">
        select id,user_id,user_name,real_name,login_name,phone,email,nick_name,id_num,create_time,qr_code_img_url from user where status = 1 order by create_time desc
    </select>
    <resultMap type="java.util.Map" id="teacherResultMap">
        <id property="id" column="ID" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="version" property="version" jdbcType="INTEGER"/>

        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="accid" property="accid" jdbcType="VARCHAR"/>
        <result column="accid_token" property="accidToken" jdbcType="VARCHAR"/>
        <result column="pay_password" property="payPassword" jdbcType="VARCHAR"/>

        <result column="money" property="money" jdbcType="DECIMAL"/>
        <result column="countries" property="countries" jdbcType="VARCHAR"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="area" property="area" jdbcType="VARCHAR"/>
        <result column="countries_id" property="countriesId" jdbcType="VARCHAR"/>
        <result column="province_id" property="provinceId" jdbcType="VARCHAR"/>
        <result column="city_id" property="cityId" jdbcType="VARCHAR"/>

        <result column="area_id" property="areaId" jdbcType="VARCHAR"/>
        <result column="score" property="score" jdbcType="DECIMAL"/>
        <result column="user_type" property="userType" jdbcType="INTEGER"/>

        <result column="label_id" property="labelId" jdbcType="VARCHAR"/>
        <result column="user_level" property="userLevel" jdbcType="INTEGER"/>
        <result column="user_identity" property="userIdentity" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="user_type_id" property="userTypeName" jdbcType="VARCHAR"/>
        <result column="user_type_name" property="userTypeName" jdbcType="VARCHAR"/>
        <result column="user_intro" property="userIntro" jdbcType="VARCHAR"/>
        <result column="signature" property="signature" jdbcType="VARCHAR"/>
        <result column="seqno" property="seqno" jdbcType="VARCHAR"/>
        <result column="photo" property="photo" jdbcType="INTEGER"/>
        <result column="country_code"  property="countryCode" jdbcType="VARCHAR"/>
        <association property="userlevel" javaType="UserLevel" column="user_level">
            <id property="id" column="ID" jdbcType="INTEGER"></id>
            <result property="stuname" column="stuname" jdbcType="VARCHAR"></result>
        </association>
        <association property="stulabel" javaType="StudyLabel" column="label_id">
            <id property="id" column="ID" jdbcType="INTEGER"></id>
            <result property="labelname" column="labelname" jdbcType="VARCHAR"></result>
        </association>
        <collection property="courseList" ofType="java.util.Map"
                    select="selectCourseListByTeacherId" column="{userId = user_id}">
        </collection>
    </resultMap>
    <select id="getTeacherUsersPage" resultMap="teacherResultMap" parameterType="java.util.Map" flushCache="true">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t3.labelname,
        t2.stuname,
        t1.id,
        t1.user_id,
        t1.user_name,
        t1.real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
        IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.signature,
        t1.seqno,
        t1.photo,
        userType.user_type_id,
        userType.`type_name` as user_type_name
        FROM
        user t1
        LEFT JOIN user_level t2
        ON t1.user_level = t2.id
        LEFT JOIN study_label t3
        ON t1.label_id = t3.id
        LEFT JOIN user_type userType
        ON userType.`user_type_id` = t1.`user_type_id`
        WHERE 1 = 1
        <if test="map.keyword != null and map.keyword!=''">
            and
            (
            t1.user_name like CONCAT('%',#{map.keyword},'%')
            or t1.real_name like CONCAT('%',#{map.keyword},'%')
            or t1.login_name like CONCAT('%',#{map.keyword},'%')
            or t1.nick_name like CONCAT('%',#{map.keyword},'%')
            or t3.labelname like CONCAT('%',#{map.keyword},'%')
            )
        </if>
        <if test="map.phone != null and map.phone!=''">
            and (
            t1.phone like CONCAT('%',#{map.phone},'%')
            )
        </if>
        <if test="map.type != null  and map.type != '' or  map.type  == 0">and
            t1.user_type = #{map.type,jdbcType=INTEGER}
        </if>
        <if test="map.identity != null and map.identity != '' or  map.identity  == 0 ">
            and t1.user_identity = #{map.identity,jdbcType=INTEGER}
        </if>
        <if test="map.status != null and map.status != '' or  map.status  == 0 ">
            and t1.status = #{map.status,jdbcType=INTEGER}
        </if>
        order by t1.seqno asc, t1.create_time desc
    </select>
    <select id="selectCourseListByTeacherId" parameterType="java.util.Map" resultType="java.util.Map">
        select course_id,course_title   from course where teacher_id =#{userId}
    </select>
    <insert id="insertTeacherUser" parameterType="java.util.Map">
          insert user(user_id,
                       user_type_id,
                       real_name,
                       user_name,
                       nick_name,
                       phone,
                       login_name,
                       password,
                       seqno,
                       creater,
                       create_time,
                       status,
                       version,
                       user_intro,
                       user_intro_text,
                       user_type,
                       user_identity,
                       photo,
                       country_code,
                       qr_code_url,
                       rectangle_photo,
                       expiration_date)
                       values(#{map.userId},
                        #{map.userTypeId},
                        #{map.realName},
                        #{map.userName},
                        #{map.nickName},
                        #{map.phone},
                        #{map.loginName},
                        #{map.password},
                        #{map.seqno},
                        #{map.creater},
                        #{map.createTime},
                        #{map.status},
                        #{map.version},
                        #{map.userIntro},
                        #{map.userIntrText},
                        #{map.userType},
                        #{map.userIdentity},
                        #{map.photo},
                        #{map.countryCode},
                        #{map.qrCodeUrl},
                        #{map.rectanglePhoto},
                        #{map.expirationDate})
    </insert>

    <update id="updateTeacherUser" parameterType="java.util.Map">
         update user
        <set>
            <if test="map.userTypeId !=null and map.userTypeId !=''">
                user_type_id =#{ map.userTypeId},
            </if>
            <if test="map.realName !=null and map.realName !=''">
                real_name =#{ map.realName},
            </if>
            <if test="map.userName !=null and map.userName !=''">
                user_name =#{ map.userName},
            </if>
            <if test="map.loginName !=null and map.loginName !=''">
                phone =#{ map.phone},
            </if>
            <if test="map.phone !=null and map.phone !=''">
                login_name =#{ map.loginName},
            </if>

            <if test="map.nickName !=null and map.nickName !=''">
                nick_name =#{ map.nickName},
            </if>
            <if test="map.password !=null and map.password !=''">
                password =#{ map.password},
            </if>
            <if test="map.seqno !=null ">
                seqno =#{ map.seqno},
            </if>

            <if test="map.userIntro !=null and map.userIntro !='' ">
                user_intro =#{ map.userIntro},
            </if>

            <if test="map.userIntrText !=null and map.userIntrText !=''  ">
                user_intro_text =#{ map.userIntrText},
            </if>
            <if test="map.status !=null ">
                status =#{ map.status},
            </if>
            <if test="map.userType !=null ">
                user_type =#{ map.userType},
            </if>

            <if test="map.identity !=null ">
                user_identity =#{ map.identity},
            </if>
            <if test="map.photo !=null and map.photo != '' ">
                photo =#{ map.photo},
            </if>
            <if test="map.rectanglePhoto !=null and map.rectanglePhoto != '' ">
                rectangle_photo =#{ map.rectanglePhoto},
            </if>
            <if test="map.countryCode !=null and map.countryCode != '' ">
                country_code =#{ map.countryCode},
            </if>

            <if test="map.qrCodeImgUrl != null and map.qrCodeImgUrl != '' ">
                qr_code_img_url=#{map.qrCodeImgUrl},
            </if>

            <if test="map.expirationDate != null ">
                expiration_date = #{map.expirationDate},
            </if>

        </set>
         where user_id =#{map.userId}
    </update>
    <select id="selectTeacherUserByUserId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t1.user_id,
        t1.user_name,
        IFNULL(IFNULL(IFNULL(t1.real_name,t1.nick_name),t1.user_name),t1.login_name) AS real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
       IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.user_intro_text,
        t1.seqno,
        t1.photo,
        t1.signature,
        ty.`type_name` FROM user t1
        LEFT JOIN user_type ty ON ty.`user_type_id` = t1.`user_type_id`
        WHERE t1.user_id =#{userId}
    </select>

    <delete id="delUserByUserId" parameterType="java.lang.String">
        delete from user where user_id = #{userId};
    </delete>

    <delete id="delUserChatRoomByUserId" parameterType="java.lang.String">
        delete from chat_room where user_id = #{userId};
    </delete>

    <delete id="delUserLiveRoomByUserId" parameterType="java.lang.String">
        delete from live_room where user_id = #{userId};
    </delete>
    <!-- 根据教师类别ID查询有效教师用户列表-->
    <select id="selectTeacherUserByUserTypeId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t1.user_id,
        t1.user_name,
        t1.real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
       IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.user_intro_text,
        t1.seqno,
        t1.photo,
        t1.signature
        from user t1 where t1.user_type_id = #{userTypeId} and t1.status =1 and t1.user_type =1
    </select>

    <select id="getUserListByMap" resultMap="resultMap" parameterType="Map">
        select id,user_id,user_name,real_name,login_name,country_code,phone,email,nick_name,id_num,create_time from user
        where 1 = 1
        <if test="id != null">AND id = #{id}</if>
        <if test="userId != null and userId != ''">AND user_id = #{userId}</if>
        <if test="userName != null and userName != ''">AND user_name = #{userName}</if>
        <if test="realName != null and realName != ''">AND real_name = #{realName}</if>
        <if test="loginName != null and loginName != ''">AND login_name = #{loginName}</if>
        <if test="phone != null and phone != ''">AND phone = #{phone}</if>
        <if test="nickName != null and nickName != ''">AND nick_name = #{nickName}</if>
        <if test="email != null and email != ''">AND email = #{email}</if>
        <if test="userIds != null and userIds != ''">AND user_id in (${userIds})</if>
        <if test="status != null">AND status = #{status}</if>
    </select>
    <!--检验是否绑定手机号-->
    <select id="checkPhone" resultType="Integer" parameterType="String">
          select count(phone) from `user` where phone = #{phone}
    </select>
    <!--找回登录密码-->
    <update id="findPwd" parameterType="User">
        update `user` set password = #{password} where phone = #{phone}
    </update>
    <!--修改个人信息-->
    <update id="updateUser" parameterType="User">
        update `user`
        <set>
            <if test="userName != null">
                user_name = #{userName},
            </if>
            <if test="realName != null">
                real_name = #{realName},
            </if>
            <if test="loginName != null">
                login_name = #{loginName},
            </if>
            <if test="nickName != null">
                nick_name = #{nickName},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="email != null">
                email = #{email},
            </if>
            <if test="countries != null">
                countries = #{countries},
            </if>
            <if test="province != null">
                province = #{province},
            </if>

            <if test="city != null">
                city = #{city},
            </if>

            <if test="countriesId != null">
                countries_id = #{countriesId},
            </if>
            <if test="provinceId != null">
                province_id = #{provinceId},
            </if>
            <if test="cityId != null">
                city_id = #{cityId},
            </if>

            <if test="photo != null">
                photo = #{photo},
            </if>

            <if test="qrCodeUrl != null and qrCodeUrl !=''">
                qr_code_url = #{qrCodeUrl},
            </if>

            <if test="qrCodeImgUrl != null and qrCodeImgUrl !=''">
                qr_code_img_url=#{qrCodeImgUrl},
            </if>

            <if test="signature != null">
                signature = #{signature}
            </if>
        </set>
        where user_id = #{userId}
    </update>
    <resultMap type="cn.com.myproject.user.entity.VO.APITearcherUser" id="apiTeacherResultMap">
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="BIGINT"/>
        <result column="version" property="version" jdbcType="INTEGER"/>

        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="login_name" property="loginName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="nick_name" property="nickName" jdbcType="VARCHAR"/>
        <result column="accid" property="accid" jdbcType="VARCHAR"/>
        <result column="accid_token" property="accidToken" jdbcType="VARCHAR"/>
        <result column="pay_password" property="payPassword" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="money" property="money" jdbcType="DECIMAL"/>
        <result column="countries" property="countries" jdbcType="VARCHAR"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="area" property="area" jdbcType="VARCHAR"/>
        <result column="countries_id" property="countriesId" jdbcType="VARCHAR"/>
        <result column="province_id" property="provinceId" jdbcType="VARCHAR"/>
        <result column="city_id" property="cityId" jdbcType="VARCHAR"/>

        <result column="area_id" property="areaId" jdbcType="VARCHAR"/>
        <result column="score" property="score" jdbcType="DECIMAL"/>
        <result column="user_type" property="userType" jdbcType="INTEGER"/>

        <result column="label_id" property="labelId" jdbcType="VARCHAR"/>
        <result column="user_level" property="userLevel" jdbcType="INTEGER"/>
        <result column="user_identity" property="userIdentity" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="user_type_id" property="userTypeId" jdbcType="VARCHAR"/>
        <result column="user_type_name" property="userTypeName" jdbcType="VARCHAR"/>
        <result column="user_intro" property="userIntro" jdbcType="VARCHAR"/>
        <result column="user_intro_text" property="userIntroText" jdbcType="VARCHAR"/>
        <result column="signature" property="signature" jdbcType="VARCHAR"/>
        <result column="seqno" property="seqno" jdbcType="INTEGER"/>
        <result column="photo" property="photo" jdbcType="VARCHAR"/>
        <result column="rectangle_photo" property="rectanglePhoto" jdbcType="VARCHAR"/>
        <result column="country_code" property="countryCode" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="getAPITeacherUsersPage" resultMap="apiTeacherResultMap" parameterType="java.util.Map" flushCache="true">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t3.labelname,
        t1.user_id,
        t1.user_name,
        t1.real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
        IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.user_intro_text,
        t1.seqno,
        t1.photo,
        t1.signature,
        userType.user_type_id,
        userType.`type_name` as user_type_name
        FROM
        user t1
        LEFT JOIN study_label t3
        ON t1.label_id = t3.id
        LEFT JOIN user_type userType
        ON userType.`user_type_id` = t1.`user_type_id`
        WHERE 1 = 1
        <if test="map.keyword != null and map.keyword!=''">
            and
            (
            t1.user_name like CONCAT('%',#{map.keyword},'%')
            or t1.real_name like CONCAT('%',#{map.keyword},'%')
            or t1.login_name like CONCAT('%',#{map.keyword},'%')
            or t1.nick_name like CONCAT('%',#{map.keyword},'%')
            or t3.labelname like CONCAT('%',#{map.keyword},'%')
            )
        </if>
        <if test="map.phone != null and map.phone!=''">
            and (
            t1.phone like concat('%',#{map.phone},'%')
            )
        </if>
        <if test="map.type != null  and map.type != '' or  map.type  == 0">and
            t1.user_type = #{map.type,jdbcType=INTEGER}
        </if>
        <if test="map.identity != null and map.identity != '' or  map.identity  == 0 ">
            and t1.user_identity = #{map.identity,jdbcType=INTEGER}
        </if>
        <if test="map.status != null and map.status != '' or  map.status  == 0 ">
            and t1.status = #{map.status,jdbcType=INTEGER}
        </if>
        <if test="map.userId != null and map.userId != ''">
            and t1.user_id = #{map.userId,jdbcType=VARCHAR}
        </if>
        <if test="map.userTypeId != null and map.userTypeId != ''">
            and t1.user_type_id = #{map.userTypeId,jdbcType=VARCHAR}
        </if>
        order by t1.seqno asc, t1.create_time desc
    </select>

    <select id="selectTeacherUserById" resultMap="apiTeacherResultMap" parameterType="java.lang.String" flushCache="true">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t3.labelname,
        t1.user_id,
        IFNULL(t1.user_name,t1.login_name) AS user_name,
        IFNULL(IFNULL(IFNULL(t1.real_name,t1.nick_name),t1.user_name),t1.login_name) AS real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
        IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.user_intro_text,
        t1.seqno,
        t1.photo,
        t1.signature,
        userType.user_type_id,
        userType.`type_name` as user_type_name
        FROM
        user t1
        LEFT JOIN study_label t3
        ON t1.label_id = t3.id
        LEFT JOIN user_type userType
        ON userType.`user_type_id` = t1.`user_type_id`
        WHERE t1.user_type =1
        and t1.status =1
        and t1.user_id = #{userId,jdbcType=VARCHAR}
        order by t1.seqno asc, t1.create_time desc
    </select>

    <!--检验用户名是否存在-->
    <select id="checkLoginName" parameterType="String" resultType="Integer">
        select count(login_name) from `user` where login_name = #{loginName}
    </select>

    <select id="selectUserByUserId" parameterType="java.lang.String" resultType="java.util.Map">
        SELECT  u.*, ty.`type_name` FROM user u
        LEFT JOIN user_type ty ON ty.`user_type_id` = u.`user_type_id`
        WHERE u.user_id =#{userId}
    </select>

    <select id="selecUserDetail" resultType="User" parameterType="java.lang.String">
        select u.qr_code_url,u.user_id,u.login_name,u.user_name,u.real_name,u.nick_name,u.country_code,u.phone,u.email,
        u.password,u.pay_password,u.id_num,u.status,u.accid,u.accid_token,u.countries,u.province,u.city,u.area,u.countries_id,
        u.province_id,u.city_id,u.area_id,u.score,u.user_type,u.label_id,u.user_level,u.user_identity,u.user_type_id,
        u.photo,u.signature,u.commendname,uc.tael as money,
        IF(user_type=1 ,
  (SELECT COUNT(user_id) FROM  user_teacher_focus focus   WHERE focus.`teacher_id` =#{userId}  AND focus.is_focus = 1  AND focus.STATUS = 1 ),
  (SELECT COUNT(focus.`teacher_id`)FROM user_teacher_focus focus  WHERE  focus.`user_id` =#{userId}   AND focus.is_focus = 1 AND focus.STATUS = 1 ))  AS myFocuNumber
         from user u
         left join user_capital uc on uc.user_id = u.user_id
        where u.user_id = #{userId}
    </select>
    
    <update id="findPay" parameterType="User">
          update `user` set pay_password = #{payPassword} where phone = #{phone}
    </update>
    <select id="selectByUserType" resultMap="resultMap" parameterType="java.lang.Integer">
      select * from user where user_type = #{userType}
    </select>
    <select id="checkUserNameOnly" parameterType="String" resultType="Integer">
       select count(user_name) from `user`  where user_name = #{userName}
    </select>
    <select id="selectByPhoneNum" resultMap="resultMap">
           select CONCAT(countries,province,city) as address,phone,country_code,email,countries,province,city,countries_id,province_id,city_id,signature,real_name,qr_code_url,user_id,login_name,user_name,password,pay_password,nick_name,real_name,status,create_time,version,accid,accid_token,expiration_date,money,user_identity,label_id,labelName,photo,expiration_date,qr_code_img_url from user  where country_code =#{countryCode} and phone = #{phone};
    </select>
    <update id="updateVIP" parameterType="User">
        update user
        <set>
            <if test="userIdentity !=null">
                user_identity = #{userIdentity},
            </if>
            <if test="expirationDate !=null and expirationDate !=''">
                expiration_date = #{expirationDate},
            </if>
            <if test="commendname !=null and commendname !=''">
                commendname = #{commendname},
            </if>
        </set>
         where user_id = #{userId}
    </update>
    <select id="getUserMessageByIm" parameterType="String" resultType="User">
        select nick_name,photo,signature from `user` where accid = #{accid}
    </select>
    <select id="checkCodeAndPhone" resultType="Integer">
        select count(*) from user u where u.country_code =#{countryCode} and u.phone = #{phone}
    </select>
    <!--检验是国际手机号是否重复-->
    <select id="checkPhoneIsExist" resultType="Integer" parameterType="User">
        select count(phone) from `user` where  CONCAT(user.`country_code`,user.`phone`) = CONCAT('${countryCode}','${phone}')
    </select>

    <select id="searchIndexFourTeachers"  resultMap="apiTeacherResultMap" parameterType="java.util.Map">
        SELECT
        CONCAT(
        t1.countries,
        t1.province,
        t1.city,
        t1.area
        ) address,
        t3.labelname,
        t1.user_id,
        IFNULL(t1.user_name,t1.login_name) AS user_name,
        IFNULL(IFNULL(IFNULL(t1.real_name,t1.nick_name),t1.user_name),t1.login_name) AS real_name,
        t1.login_name,
        t1.password,
        t1.phone,
        t1.email,
        t1.nick_name,
        t1.id_num,
        t1.create_time,
        t1.money,
        t1.countries,
        t1.country_code,
        t1.province,
        t1.city,
        t1.area,
        IFNULL( (SELECT capital.integral FROM user_capital capital WHERE capital.user_id = t1.`user_id` ),0) AS score,
        t1.user_type,
        t1.status,
        t1.user_level,
        t1.user_identity,
        t1.label_id ,
        t1.user_intro,
        t1.user_intro_text,
        t1.seqno,
        t1.photo,
        t1.rectangle_photo,
        t1.signature,
        userType.user_type_id,
        userType.`type_name` as user_type_name
        FROM
        user t1
        LEFT JOIN study_label t3
        ON t1.label_id = t3.id
        LEFT JOIN user_type userType
        ON userType.`user_type_id` = t1.`user_type_id`
        where   t1.user_type =1 and t1.status = 1
        order by t1.seqno asc, t1.create_time desc limit 4
    </select>
    <select id="getUserByOpenId" parameterType="String" resultType="User">
          select * from user where openId = #{openId} and `status` = 1
    </select>
    <update id="bindQQ" parameterType="User">
        update `user` set openId = #{openId} where user_id =#{userId}
    </update>
    <update id="changeIdentity">
        update `user` set user_identity = #{userIdentity},expiration_date = #{expirationDate} where user_id = #{userId}
    </update>
    <select id="selectUserByPhoneNum" resultMap="resultMap" parameterType="java.lang.String">
        select * from `user` where phone = #{phone}
    </select>
    <select id="getUserByWxOpenId" resultType="User" parameterType="java.lang.String">
        select * from user where wx_openId = #{wxOpenId} and `status` = 1
    </select>
    <update id="bindWx" parameterType="User">
        update `user` set wx_openId = #{wxOpenId} where user_id =#{userId}
    </update>
    <select id="searchUserLevel" resultType="java.lang.String">
        select u.user_identity from user u where u.user_id = #{userId}
    </select>

    <select id="getUserByWeiboOpenId" resultType="User" parameterType="java.lang.String">
        select * from `user` where weibo_openId = #{weiboOpenId} and `status` = 1
    </select>
    <update id="bindWeiBo" parameterType="User">
        update `user` set weibo_openId = #{weiboOpenId} where user_id =#{userId}
    </update>
    <select id="selectUserIdAndName" resultMap="resultMap">
        select u.user_id,u.user_name from user u
    </select>


    <!--除去当前用户的所有下级用户的用户列表-->
    <select id="getNonsubordinateProfitShareRelationUserList" resultMap="resultMap" parameterType="java.lang.String">
        select id,user_id,user_name,real_name,login_name,phone,email,nick_name,id_num,create_time from user where status = 1
        and user_id not in(
        <include refid="TwoThreeUserIdsList"/>
        )
        order by create_time desc
    </select>
    <!--用户的二级和三级用户user_id列表-->
    <sql id="TwoThreeUserIdsList">
        SELECT IFNULL(s2.user_id,'')
        FROM (SELECT
                s.level2_user_id user_id
                FROM
                (SELECT
                level1.*,
                level2.user_id AS level2_user_id,
                level3.user_id AS level3_user_id
                FROM
                a_profit_share_relation level1
                LEFT JOIN a_profit_share_relation level2
                ON level1.user_id = level2.parent_user_id
                LEFT JOIN a_profit_share_relation level3
                ON level2.user_id = level3.parent_user_id
                WHERE level1.user_id = #{userId}) s
                UNION
                SELECT
                s1.level3_user_id user_id
                FROM
                (SELECT
                level1.*,
                level2.user_id AS level2_user_id,
                level3.user_id AS level3_user_id
                FROM
                a_profit_share_relation level1
                LEFT JOIN a_profit_share_relation level2
                ON level1.user_id = level2.parent_user_id
                LEFT JOIN a_profit_share_relation level3
                ON level2.user_id = level3.parent_user_id
                WHERE level1.user_id = #{userId}) s1
        )s2
    </sql>
    <update id="change_forever">
        update `user` set expiration_date = #{expirationDate},user_type_id = #{userTypeId},user_identity = 2,user_type = 1 where user_id = #{userId}
    </update>

    <select id="selectUserIdentityByUserId" resultType="java.lang.Integer" parameterType="java.lang.String">
        select u.user_identity from user u where u.user_id = #{userId}
    </select>
    
    
    <select id="selectThePublicOpenId" parameterType="java.lang.String" resultType="java.lang.String">
          select the_public_openId from `user`  where  user_id = #{userId}
    </select>
    
    <update id="updateThePublicOpenId" parameterType="User">
           update `user` set the_public_openId = #{thePublicOpenId} where user_id =#{userId}
    </update>

    <update id="updatePwdByUserId" parameterType="User">
        update user set password=#{password} where user_id=#{userId}
    </update>

    <update id="updatePayByUserId" parameterType="User">
        update user set pay_password=#{payPassword} where user_id=#{userId}
    </update>

</mapper>